{"ast":null,"code":"var _jsxFileName = \"/Users/andrewwhipple/Desktop/feed-me-seymour/client/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nclass FeedUrlForm extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.props.handleFeedSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, \"Enter feed url:\", React.createElement(\"input\", {\n      type: \"text\",\n      value: this.props.feedUrl,\n      onChange: this.props.handleFeedFormChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    })));\n  }\n\n}\n\nclass FeedError extends React.Component {\n  render() {\n    if (this.props.isError) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, this.props.errorMessage));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"no-show\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }) // use no-error to hide the div\n      ;\n    }\n  }\n\n}\n\nclass FeedTitle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editable: false\n    };\n  }\n\n  handleEditButtonClick(event) {\n    console.log(\"Clicked!\");\n    this.setState({\n      editable: true\n    });\n  }\n\n  render() {\n    try {\n      let feedTitle = this.props.feedJSON.rss.channel.title._text;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Title: \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, feedTitle), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.handleEditButtonClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Edit\"));\n    } catch (error) {\n      return React.createElement(\"div\", {\n        className: \"no-show\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nclass FeedBuilder extends React.Component {\n  constructor(props) {\n    super(props);\n    this.defaultState = {\n      feedTitle: '',\n      feedUrl: '',\n      errorMessage: '',\n      isError: false,\n      feedJSON: {}\n    };\n    this.state = {\n      feedTitle: '',\n      feedUrl: '',\n      errorMessage: '',\n      isError: false,\n      feedJSON: {}\n    };\n    this.handleFeedSubmit = this.handleFeedSubmit.bind(this);\n    this.handleFeedFormChange = this.handleFeedFormChange.bind(this);\n  }\n\n  handleFeedSubmit(event) {\n    event.preventDefault();\n    fetch('/fetch_feed/' + encodeURIComponent(this.state.feedUrl), {\n      method: 'GET'\n    }).then(res => {\n      res.text().then(xmlTxt => {\n        if (res.ok) {\n          this.setState(this.defaultState);\n          this.setState({\n            errorMessage: '',\n            isError: false,\n            feedJSON: JSON.parse(xmlTxt)\n          });\n        } else {\n          this.setState(this.defaultState);\n          this.setState({\n            errorMessage: xmlTxt,\n            isError: true\n          });\n        }\n      });\n    }).catch(() => console.error('Error in fetching the RSS feed'));\n  }\n\n  handleFeedFormChange(event) {\n    this.setState({\n      feedUrl: event.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(FeedUrlForm, {\n      handleFeedSubmit: this.handleFeedSubmit,\n      handleFeedFormChange: this.handleFeedFormChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(FeedError, {\n      isError: this.state.isError,\n      errorMessage: this.state.errorMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), React.createElement(FeedTitle, {\n      feedJSON: this.state.feedJSON,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction App() {\n  return React.createElement(FeedBuilder, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  });\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/andrewwhipple/Desktop/feed-me-seymour/client/src/App.js"],"names":["React","FeedUrlForm","Component","render","props","handleFeedSubmit","feedUrl","handleFeedFormChange","FeedError","isError","errorMessage","FeedTitle","constructor","state","editable","handleEditButtonClick","event","console","log","setState","feedTitle","feedJSON","rss","channel","title","_text","error","FeedBuilder","defaultState","bind","preventDefault","fetch","encodeURIComponent","method","then","res","text","xmlTxt","ok","JSON","parse","catch","target","value","App"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,WAAP;;AAIA,MAAMC,WAAN,SAA0BD,KAAK,CAACE,SAAhC,CAA0C;AAExCC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,gBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAEE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWE,OAArC;AAA8C,MAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWG,oBAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADA,EAKA;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALA,CADF,CADF;AAYD;;AAfuC;;AAkB1C,MAAMC,SAAN,SAAwBR,KAAK,CAACE,SAA9B,CAAwC;AACtCC,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKC,KAAL,CAAWK,OAAf,EAAwB;AACtB,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKL,KAAL,CAAWM,YAAf,CADF,CADF;AAKD,KAND,MAMO;AACL,aACE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CACkC;AADlC;AAGD;AACF;;AAbqC;;AAgBxC,MAAMC,SAAN,SAAwBX,KAAK,CAACE,SAA9B,CAAwC;AACtCU,EAAAA,WAAW,CAACR,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKS,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE;AADC,KAAb;AAGD;;AAEDC,EAAAA,qBAAqB,CAACC,KAAD,EAAQ;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,SAAKC,QAAL,CAAc;AAACL,MAAAA,QAAQ,EAAE;AAAX,KAAd;AACD;;AAGDX,EAAAA,MAAM,GAAG;AACP,QAAI;AACF,UAAIiB,SAAS,GAAG,KAAKhB,KAAL,CAAWiB,QAAX,CAAoBC,GAApB,CAAwBC,OAAxB,CAAgCC,KAAhC,CAAsCC,KAAtD;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIL,SAAJ,CAFF,EAGE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKL,qBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,CADF;AAQD,KAVD,CAUE,OAAOW,KAAP,EAAc;AACd,aACE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;AACF;;AA9BqC;;AAiCxC,MAAMC,WAAN,SAA0B3B,KAAK,CAACE,SAAhC,CAA0C;AASxCU,EAAAA,WAAW,CAACR,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SARnBwB,YAQmB,GARJ;AACbR,MAAAA,SAAS,EAAE,EADE;AAEbd,MAAAA,OAAO,EAAE,EAFI;AAGbI,MAAAA,YAAY,EAAE,EAHD;AAIbD,MAAAA,OAAO,EAAE,KAJI;AAKbY,MAAAA,QAAQ,EAAE;AALG,KAQI;AAEjB,SAAKR,KAAL,GAAa;AACXO,MAAAA,SAAS,EAAE,EADA;AAEXd,MAAAA,OAAO,EAAE,EAFE;AAGXI,MAAAA,YAAY,EAAE,EAHH;AAIXD,MAAAA,OAAO,EAAE,KAJE;AAKXY,MAAAA,QAAQ,EAAE;AALC,KAAb;AAQA,SAAKhB,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBwB,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKtB,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BsB,IAA1B,CAA+B,IAA/B,CAA5B;AACD;;AAIDxB,EAAAA,gBAAgB,CAACW,KAAD,EAAQ;AACtBA,IAAAA,KAAK,CAACc,cAAN;AAEAC,IAAAA,KAAK,CAAC,iBAAiBC,kBAAkB,CAAC,KAAKnB,KAAL,CAAWP,OAAZ,CAApC,EAA0D;AAC7D2B,MAAAA,MAAM,EAAE;AADqD,KAA1D,CAAL,CAEGC,IAFH,CAESC,GAAD,IAAS;AACfA,MAAAA,GAAG,CAACC,IAAJ,GAAWF,IAAX,CAAiBG,MAAD,IAAY;AAC1B,YAAGF,GAAG,CAACG,EAAP,EAAW;AACT,eAAKnB,QAAL,CAAc,KAAKS,YAAnB;AACA,eAAKT,QAAL,CAAc;AACZT,YAAAA,YAAY,EAAE,EADF;AAEZD,YAAAA,OAAO,EAAE,KAFG;AAGZY,YAAAA,QAAQ,EAAEkB,IAAI,CAACC,KAAL,CAAWH,MAAX;AAHE,WAAd;AAMD,SARD,MAQO;AACL,eAAKlB,QAAL,CAAc,KAAKS,YAAnB;AACA,eAAKT,QAAL,CAAc;AACZT,YAAAA,YAAY,EAAE2B,MADF;AAEZ5B,YAAAA,OAAO,EAAE;AAFG,WAAd;AAID;AACF,OAhBD;AAiBD,KApBD,EAoBGgC,KApBH,CAoBS,MAAMxB,OAAO,CAACS,KAAR,CAAc,gCAAd,CApBf;AAqBD;;AAEDnB,EAAAA,oBAAoB,CAACS,KAAD,EAAQ;AAC1B,SAAKG,QAAL,CAAc;AAACb,MAAAA,OAAO,EAAEU,KAAK,CAAC0B,MAAN,CAAaC;AAAvB,KAAd;AACD;;AAIDxC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,WAAD;AAAa,MAAA,gBAAgB,EAAE,KAAKE,gBAApC;AAAsD,MAAA,oBAAoB,EAAE,KAAKE,oBAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAGE,oBAAC,SAAD;AAAW,MAAA,OAAO,EAAE,KAAKM,KAAL,CAAWJ,OAA/B;AAAwC,MAAA,YAAY,EAAE,KAAKI,KAAL,CAAWH,YAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAKE,oBAAC,SAAD;AAAW,MAAA,QAAQ,EAAE,KAAKG,KAAL,CAAWQ,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF;AAUD;;AApEuC;;AAwE1C,SAASuB,GAAT,GAAe;AAGb,SACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAID;;AAED,eAAeA,GAAf","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\n\nclass FeedUrlForm extends React.Component {\n  \n  render() {\n    return (\n      <div>\n        <form onSubmit={this.props.handleFeedSubmit}>\n        <label>\n          Enter feed url:\n          <input type=\"text\" value={this.props.feedUrl} onChange={this.props.handleFeedFormChange} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      </div>\n  \n    );\n  }\n}\n\nclass FeedError extends React.Component {\n  render() {\n    if (this.props.isError) {\n      return (\n        <div>\n          <p>{this.props.errorMessage}</p>\n        </div>\n      );\n    } else {\n      return(\n        <div className=\"no-show\"></div> // use no-error to hide the div\n    );\n    }\n  }\n}\n\nclass FeedTitle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editable: false\n    }\n  }\n  \n  handleEditButtonClick(event) {\n    console.log(\"Clicked!\");\n    this.setState({editable: true});\n  }\n\n\n  render() {\n    try {\n      let feedTitle = this.props.feedJSON.rss.channel.title._text;\n      return (\n        <div>\n          <p>Title: </p>\n          <p>{feedTitle}</p>\n          <button type=\"button\" onClick={this.handleEditButtonClick}>Edit</button>\n        </div>\n      );\n\n    } catch (error) {\n      return (\n        <div className=\"no-show\"></div>\n      );\n    }\n  }\n}\n\nclass FeedBuilder extends React.Component {\n  defaultState = {\n    feedTitle: '',\n    feedUrl: '',\n    errorMessage: '',\n    isError: false,\n    feedJSON: {},\n  }\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      feedTitle: '',\n      feedUrl: '',\n      errorMessage: '',\n      isError: false,\n      feedJSON: {},\n    }\n\n    this.handleFeedSubmit = this.handleFeedSubmit.bind(this);\n    this.handleFeedFormChange = this.handleFeedFormChange.bind(this);\n  };\n\n \n\n  handleFeedSubmit(event) {\n    event.preventDefault();\n    \n    fetch('/fetch_feed/' + encodeURIComponent(this.state.feedUrl), {\n      method: 'GET',\n    }).then((res) => {\n      res.text().then((xmlTxt) => {\n        if(res.ok) {\n          this.setState(this.defaultState);\n          this.setState({\n            errorMessage: '',\n            isError: false,\n            feedJSON: JSON.parse(xmlTxt),\n          });\n\n        } else {\n          this.setState(this.defaultState);\n          this.setState({\n            errorMessage: xmlTxt,\n            isError: true,\n          });\n        }\n      })\n    }).catch(() => console.error('Error in fetching the RSS feed')) \n  } \n  \n  handleFeedFormChange(event) {\n    this.setState({feedUrl: event.target.value});\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <FeedUrlForm handleFeedSubmit={this.handleFeedSubmit} handleFeedFormChange={this.handleFeedFormChange}/>\n      \n        <FeedError isError={this.state.isError} errorMessage={this.state.errorMessage} />\n\n        <FeedTitle feedJSON={this.state.feedJSON} />\n\n      </div> \n    );\n  }\n}\n\n\nfunction App() {\n  \n  \n  return (\n    <FeedBuilder />\n   \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}